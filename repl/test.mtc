void Print(auto Value, const char* name, uint32_t indent)
{
    for(uint32_t i = 0; i < indent; i++)
    {
        printf("    ");
    }
    printf("%s:", name ? name : "");

    @run {
        type valueType = .Compiler->GetType(.Compiler, Value);
        switch(.Compiler->GetTypeKind(.Compiler, valueType))
        {
            case metac_type_kind_struct:
            {
                metac_aggregate_members_t* members =
                    .Compiler->GetMembers(.Compiler, valueType);
                .Compiler->Assert(.Compiler, members, "ICE: structs are supposed to have members");

                const uint32_t memberCount = members->Count;
                for(uint32_t i = 0; i < memberCount; i++)
                {
                    metac_aggregate_member_t member = members->Members[i];
                    eject Print(Value.$(member.name), #$(member.name), indent + 1);
                }
            }  break;
            default:
            {
                .Compiler->Error(.Compiler, "Value type not supported");
            }
        }
    }
}
