MetalNode {
    Identifier @internal {
        [a-zA-Z_][] identifier
    }

    Digits @internal {
        [0-9][] digits
    }

    Operator @enumify
    {
        Add {
            "+"
        }

        Sub {
             "-"
        }

        Mul {
             "*"
        }

        Div {
             "/"
        }

        Cat {
             "~"
        }

        CatAss {
             "~="
        }

        Assign {
             "="
        }

        Eq {
            "=="
        }

        Neq {
            "!="
        }

        Lt {
             "<"
        }

        Gt {
             ">"
        }

        Le {
             "<="
        }

        Ge {
             ">="
        }

        SpaceShip {
             "<=>"
        }

        Dot {
             "."
        }

        Arrow {
             "->"
        }
    }

    Expr {

        IntExpr {
            Digits number;
        }

        StringExpr {
            "\"", char[] string, "\""
        }

        InjectExpr {
            "inject", Expr ie
        }

        EjectExpr {
            "eject", Expr ee
        }

        AssertExpr {
            "assert", "(", Expr ae, ",", StringLiteral msg, ")"
        }

        OuterParenExpr {
            "$(", Expr[] exps : ",", ")"
        }

        OuterExpr {
            "$", Identfier outer_name
        }
        AddrExpr {
            "&", Expr lhs
        }

        PtrExpr {
            "*", Expr lhs
        }

        ParenExpr {
            "(", Expresion lhs, ")"
        }

        IdentifierExpr {
            Identfier identifier
        }

        BinaryExpr {
             Expr rhs, Operator op, Expr rhs
        }

        TernaryExpr {
            Expr cond, "?", Expr e1, ":", Expr e2
        }

        SliceExpr {
            Expr slice, "[", Expr lower, "..", Expr upper, "]"
        }

        FullSliceExpr {
            Expr var, "[]"
        }

        CallExpr {
            Expr func, "(", Expr[] args : ",", ")"
        }
    }


    Variable @internal {
        "type" / Identfier type, Identifier name
    }

    Comment {
        CommentLine @internal {
            "//"
        }

        CommentMultilline {
            "/*," char[], "*/"
        }
    }


    Typedef {
        "typedef", Type type, Identifier name, ";"
    }

    Type {
        Struct {
            "struct", Identifier name,  "{", Variable[] members : ";", "}"
        }

        Union {
            "union", Identifier name, "{", Variable[] members : ";", "}"
        }

        Enum {
            "enum", Identifier name, "{", Identfier[] member_names : ",", "}"
        }

        ArrayType {
            Type elementType , "[", Expr e, "]"
        }
    }
}
